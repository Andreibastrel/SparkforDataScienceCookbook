import org.apache.spark.SparkConf
import org.apache.spark.SparkContext
import org.apache.spark.streaming._
import org.apache.spark.streaming.StreamingContext._
import org.apache.spark.streaming.dstream._
import org.apache.spark.SparkConf

object StatelessTransformations {
  def main(args:Array[String]) {
    val conf= new SparkConf
    conf.setMaster("spark://master:7077").setAppName("StreamingApp")
    val sc = new SparkContext(conf)
    val ssc = new StreamingContext(sc, Seconds(5))
    val spamInfoRDD = ssc.sparkContext.textFile("/path/fileName", 2)
    val lines = ssc.socketTextStream("172.22.225.174", 7777)
    val mapLines = lines.map(ele => ele+"<<<>>>")
    val mapLines2 = lines.map(ele => (ele,1))
    val errorLines = lines.filter(line =>line.contains("Padma"))

    val flatMapLines = lines.flatMap(ele => ele.split(","))
    val reduceByKeyLines = mapLines2.reduceByKey((a,b) => a+b)
    val groupByKeyLines = mapLines2.groupByKey().mapValues(names =>
      names.toSet.size)
    val unionedDstreams = mapLines.union(flatMapLines)
    val joinedDstream = reduceByKeyLines.join(groupByKeyLines)
    val cogroupedDStream = reduceByKeyLines.cogroup(groupByKeyLines)
    val transformLines = lines.transform(rdd =>
    {rdd.union(spamInfoRDD).filter(_.contains("Padma"))})
    errorLines.print
    mapLines.print
    flatMapLines.print
    reduceByKeyLines.print
    groupByKeyLines.print
    joinedDstream.print
    cogroupedDStream.print
    unionedDstreams.print
    ssc.start
    ssc.awaitTermination
    ssc.stop()
  }
