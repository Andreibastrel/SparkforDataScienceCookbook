import numpy as np
import tensorflow as tf
import os
from tensorflow.python.platform import gfile
import os.path
import re
import sys
import tarfile
from subprocess import Popen, PIPE, STDOUT
from pyspark import SparkContext
def run(cmd):
p = Popen(cmd, shell=True, stdin=PIPE, stdout=PIPE,
stderr=STDOUT, close_fds=True)
return p.stdout.read()
model_dir = '/tmp/imagenet'
image_file = ""
num_top_predictions = 5
DATA_URL =
'http://download.tensorflow.org/models/image/imagenet/inception-
2015-12-05.tgz'
IMAGES_INDEX_URL = 'http://image-
net.org/imagenet_data/urls/imagenet_fall11_urls.tgz'

image_batch_size = 3
max_content = 1000L
sc = SparkContext("local", "Distributed_tensorFlow")
def read_file_index():
from six.moves import urllib
content = urllib.request.urlopen(IMAGES_INDEX_URL)
data = content.read(max_content)
tmpfile = "/tmp/imagenet.tgz"
with open(tmpfile, 'wb') as f:
f.write(data)
run("tar -xOzf %s > /tmp/imagenet.txt" % tmpfile)
with open("/tmp/imagenet.txt", 'r') as f:
lines = [l.split() for l in f]
input_data = [tuple(elts) for elts in lines if len(elts) == 2]
return [input_data[i:i+image_batch_size] for i in
range(0,len(input_data),
image_batch_size)]

class NodeLookup(object):
  def __init__(self,
    label_lookup_path=None,
    uid_lookup_path=None):
if not label_lookup_path:
  label_lookup_path = os.path.join(
    model_dir, 'imagenet_2012_challenge_label_map_proto.pbtxt')
if not uid_lookup_path:
uid_lookup_path = os.path.join(
model_dir, 'imagenet_synset_to_human_label_map.txt')
self.node_lookup = self.load(label_lookup_path,
uid_lookup_path)
def load(self, label_lookup_path, uid_lookup_path):
if not gfile.Exists(uid_lookup_path):
tf.logging.fatal('File does not exist %s', uid_lookup_path)
if not gfile.Exists(label_lookup_path):
tf.logging.fatal('File does not exist %s', label_lookup_path)



proto_as_ascii_lines = gfile.GFile(uid_lookup_path).readlines()
uid_to_human = {}
p = re.compile(r'[n\d]*[ \S,]*')
for line in proto_as_ascii_lines:
parsed_items = p.findall(line)
uid = parsed_items[0]
human_string = parsed_items[2]
uid_to_human[uid] = human_string
